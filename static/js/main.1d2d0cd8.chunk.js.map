{"version":3,"sources":["redux/store.ts","redux/constants.ts","api_helpers.ts","redux/actionCreators.ts","components/SearchPost/SearchPost.tsx","components/User/User.tsx","components/Comment/Comment.tsx","components/Comments/Comments.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","index.tsx","App.tsx"],"names":["initialState","isLoading","isLoaded","hasError","posts","searchValue","store","createStore","state","action","type","filter","post","id","map","comments","comment","applyMiddleware","thunk","API_URL","getData","url","a","fetch","response","json","getPreparedPosts","users","preparedPosts","user","find","userId","postId","setIsLoading","status","setHasError","setPosts","postsFromApi","mapDispatchToProps","changeSearchValue","search","SearchPost","connect","htmlFor","className","placeholder","value","onChange","event","target","User","name","email","city","address","removeComment","Comment","body","onClick","Comments","key","removePost","Post","title","changeAllPosts","dispatch","PostList","searchedPost","useMemo","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d2d0cd8.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_POSTS,\n  SET_SEARCH_VALUE,\n  SET_HAS_ERROR,\n  DELETE_POST,\n  DELETE_COMMENT,\n} from './constants';\nimport { PreparedPost, CommentInterface } from '../types';\n\nexport interface State {\n  isLoading: boolean;\n  isLoaded: boolean;\n  hasError: boolean;\n  posts: PreparedPost[] | [];\n  searchValue: string;\n}\n\nconst initialState = {\n  isLoading: false,\n  isLoaded: false,\n  hasError: false,\n  posts: [],\n  searchValue: '',\n};\n\nfunction reduser(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n\n    case SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n\n    case SET_SEARCH_VALUE:\n      return {\n        ...state,\n        searchValue: action.searchValue,\n      };\n\n    case SET_HAS_ERROR:\n      return {\n        ...state,\n        hasError: action.hasError,\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: (state.posts as PreparedPost[]).filter(post => post.id !== action.id),\n      };\n\n    case DELETE_COMMENT:\n      return {\n        ...state,\n        posts: (state.posts as PreparedPost[]).map((post: PreparedPost) => ({\n          ...post,\n          comments: (post.comments as CommentInterface[])\n            .filter(comment => comment.id !== action.id),\n        })),\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reduser, applyMiddleware(thunk));\n","export const SET_IS_LOADING = 'SET_IS_LOADING';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_POSTS = 'SET_POSTS';\nexport const SET_SEARCH_VALUE = 'SET_SEARCH_VALUE';\nexport const SET_HAS_ERROR = 'SET_HAS_ERROR';\nexport const DELETE_POST = 'DELETE_POST';\nexport const DELETE_COMMENT = 'DELETE_COMMENT';\n","import {\n  UserInterface,\n  Post,\n  CommentInterface,\n  PreparedPost,\n} from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPosts = (): Promise<Post[]> => {\n  return getData<Post[]>(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<UserInterface[]> => {\n  return getData<UserInterface[]>(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<CommentInterface[]> => {\n  return getData<CommentInterface[]>(`${API_URL}comments`);\n};\n\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const users: UserInterface[] = await getUsers();\n  const posts: Post[] = await getPosts();\n  const comments: CommentInterface[] = await getComments();\n\n  const preparedPosts: PreparedPost[] = posts.map(post => (\n    {\n      ...post,\n      user: users.find(user => post.userId === user.id),\n      comments: comments.filter(comment => post.id === comment.postId),\n    }\n  ));\n\n  return preparedPosts;\n};\n","import { Dispatch } from 'redux';\nimport {\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_POSTS,\n  SET_SEARCH_VALUE,\n  SET_HAS_ERROR,\n  DELETE_POST,\n  DELETE_COMMENT,\n} from './constants';\nimport { PreparedPost } from '../types';\nimport { getPreparedPosts } from '../api_helpers';\n\nexport const setIsLoading = (status: boolean) => ({\n  type: SET_IS_LOADING,\n  isLoading: status,\n});\n\nexport const setHasError = (status: boolean) => ({\n  type: SET_HAS_ERROR,\n  hasError: status,\n});\n\nexport const setIsLoaded = () => ({\n  type: SET_IS_LOADED,\n  isLoaded: true,\n});\n\nexport const setPosts = (postsFromApi: PreparedPost[]) => ({\n  type: SET_POSTS,\n  posts: postsFromApi,\n});\n\nexport const setSearchValue = (search: string) => ({\n  type: SET_SEARCH_VALUE,\n  searchValue: search,\n});\n\nexport const deletePost = (id: number) => ({\n  type: DELETE_POST,\n  id,\n});\n\nexport const deleteComment = (id: number) => ({\n  type: DELETE_COMMENT,\n  id,\n});\n\nexport const showedAllPosts = () => async (dispatch: Dispatch) => {\n  dispatch(setIsLoading(true));\n  dispatch(setHasError(false));\n\n  try {\n    const postsFromApi = await getPreparedPosts();\n\n    dispatch(setPosts(postsFromApi));\n  } catch (error) {\n    dispatch(setHasError(true));\n  }\n\n  dispatch(setIsLoading(false));\n  dispatch(setIsLoaded());\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { State } from '../../redux/store';\nimport { setSearchValue } from '../../redux/actionCreators';\n\nimport './SearchPost.css';\n\ninterface Props {\n  changeSearchValue: (search: string) => void;\n  searchValue: string;\n\n}\n\nexport const SearchPostTemplate: FC<Props> = ({ searchValue, changeSearchValue }) => {\n  const filtered = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: search } = event.target;\n\n    changeSearchValue(search);\n  };\n\n  return (\n    <>\n      <label\n        htmlFor=\"search-query\"\n        className=\"label\"\n      >\n        Search Post\n      </label>\n      <input\n        type=\"text\"\n        id=\"search-query\"\n        className=\"search_input\"\n        placeholder=\"Type search word\"\n        value={searchValue}\n        onChange={filtered}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  searchValue: state.searchValue,\n});\n\nconst mapDispatchToProps = {\n  changeSearchValue: setSearchValue,\n};\n\nexport const SearchPost = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchPostTemplate);\n","import React, { FC } from 'react';\nimport { UserInterface } from '../../types';\n\nimport './User.css';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user_info\">\n      <span>{`${name} -`}</span>\n      <span>{`${email} -`}</span>\n      <span>{`${city} -`}</span>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { CommentInterface } from '../../types';\nimport { deleteComment } from '../../redux/actionCreators';\n\nimport './Comment.css';\n\ninterface Props {\n  comment: CommentInterface;\n  removeComment: (id: number) => void;\n}\n\nexport const CommentTemplate: FC<Props> = ({ comment, removeComment }) => {\n  const {\n    name,\n    email,\n    body,\n    id,\n  } = comment;\n\n  return (\n    <li className=\"сomment\">\n      <button\n        type=\"button\"\n        className=\"delete_button delete_button-comment\"\n        onClick={() => removeComment(id)}\n      >\n        Delete\n      </button>\n      <span className=\"сomment__name\">{`${name} (${email})`}</span>\n      <p className=\"сomment__body\">{body}</p>\n    </li>\n  );\n};\n\nconst mapDispatchToProps = ({\n  removeComment: deleteComment,\n});\n\nexport const Comment = connect(\n  null,\n  mapDispatchToProps,\n)(CommentTemplate);\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentInterface } from '../../types';\n\nimport './Comments.css';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const Comments: FC<Props> = ({ comments }) => (\n  <ul className=\"comments\">\n    {comments.map(comment => <Comment key={comment.id} comment={comment} />)}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { PreparedPost } from '../../types';\nimport { deletePost } from '../../redux/actionCreators';\nimport { User } from '../User/User';\nimport { Comments } from '../Comments/Comments';\nimport '../../App.css';\nimport './Post.css';\n\ninterface Props {\n  post: PreparedPost;\n  removePost: (id: number) => void;\n}\n\nexport const PostTemplate: FC<Props> = ({ post, removePost }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n    id,\n  } = post;\n\n  return (\n    <li className=\"post\">\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__body\">{body}</p>\n      {user && <User user={user} />}\n      {comments && <Comments comments={comments} />}\n      <button\n        type=\"button\"\n        className=\"delete_button\"\n        onClick={() => removePost(id)}\n      >\n        Delete Post\n      </button>\n    </li>\n  );\n};\n\nexport const mapDispatchToProps = {\n  removePost: deletePost,\n};\n\nexport const Post = connect(\n  null,\n  mapDispatchToProps,\n)(PostTemplate);\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { State } from '../../redux/store';\nimport { PreparedPost } from '../../types';\nimport { showedAllPosts } from '../../redux/actionCreators';\nimport { SearchPost } from '../SearchPost/SearchPost';\nimport { Post } from '../Post/Post';\nimport '../../App.css';\nimport './PostsList.css';\n\ninterface StateProps {\n  isLoading: boolean;\n  isLoaded: boolean;\n  hasError: boolean;\n  posts: PreparedPost[] | [];\n  searchValue: string;\n  changeAllPosts: () => void;\n}\n\ntype Props = StateProps;\n\nexport const PostListTemplate: FC<Props> = ({\n  isLoading,\n  isLoaded,\n  hasError,\n  posts,\n  searchValue,\n  changeAllPosts,\n}) => {\n  const searchedPost = useMemo(() => posts.filter(\n    post => post.title.toLowerCase().includes(searchValue)\n    || post.body.toLowerCase().includes(searchValue),\n  ), [posts, searchValue]);\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n     Loading...\n      </p>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <>\n        <p className=\"loading\">\n        An error has occurred. Please try again later\n        </p>\n        <button\n          type=\"button\"\n          className=\"loading_button\"\n          onClick={changeAllPosts}\n        >\n          Try again\n        </button>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Dynamic list of posts</h1>\n      {(\n        !isLoaded\n          ? (\n            <>\n              <p className=\"initual_loading\">\n                Load posts\n              </p>\n              <button\n                type=\"button\"\n                className=\"loading_button\"\n                onClick={changeAllPosts}\n              >\n                Load\n              </button>\n            </>\n          )\n          : (\n            <>\n              <SearchPost />\n              <ul className=\"posts_wrapper\">\n                {searchedPost.map(post => <Post key={post.id} post={post} />)}\n              </ul>\n            </>\n          )\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  hasError: state.hasError,\n  posts: state.posts,\n  searchValue: state.searchValue,\n});\n\nconst mapDispatchToProps = {\n  changeAllPosts: showedAllPosts,\n};\n\nexport const PostList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostListTemplate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport { PostList } from './components/PostsList/PostsList';\nimport './App.css';\n\nexport const App = () => (\n  <Provider store={store}>\n    <PostList />\n  </Provider>\n\n);\n"],"sourceRoot":""}
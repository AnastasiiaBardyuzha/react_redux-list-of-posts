{"version":3,"sources":["redux/store.ts","redux/constants.ts","api_helpers.ts","components/SearchPost/SearchPost.tsx","redux/actionCreators.ts","components/User/User.tsx","components/Comment/Comment.tsx","components/Comments/Comments.tsx","components/Post/Post.tsx","components/PostsList/PostsList.tsx","index.tsx","App.tsx"],"names":["initialState","isLoading","isLoaded","hasError","posts","searchValue","store","createStore","state","action","type","API_URL","getData","url","a","fetch","response","json","getPreparedPosts","users","comments","preparedPosts","map","post","user","find","userId","id","filter","comment","postId","mapDispatchToProps","changeSearchValue","search","SearchPost","connect","htmlFor","className","placeholder","value","onChange","event","target","User","name","email","city","address","Comment","body","Comments","key","Post","title","changeIsLoading","status","changeIsLoaded","changeHasError","changeposts","postsFromApi","PostList","showedAllPosts","searchedPost","useMemo","toLowerCase","includes","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.86c85233.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport {\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_POSTS,\n  SET_SEARCH_VALUE,\n  SET_HAS_ERROR,\n} from './constants';\nimport { PreparedPost } from '../types';\n\nexport interface State {\n  isLoading: boolean;\n  isLoaded: boolean;\n  hasError: boolean;\n  posts: PreparedPost[] | [];\n  searchValue: string;\n}\n\nconst initialState = {\n  isLoading: false,\n  isLoaded: false,\n  hasError: false,\n  posts: [],\n  searchValue: '',\n};\n\n\nfunction reduser(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case SET_IS_LOADING:\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n\n    case SET_IS_LOADED:\n      return {\n        ...state,\n        isLoaded: action.isLoaded,\n      };\n\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n\n    case SET_SEARCH_VALUE:\n      return {\n        ...state,\n        searchValue: action.searchValue,\n      };\n\n    case SET_HAS_ERROR:\n      return {\n        ...state,\n        hasError: action.hasError,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport const store = createStore(reduser);\n","export const SET_IS_LOADING = 'SET_IS_LOADING';\nexport const SET_IS_LOADED = 'SET_IS_LOADED';\nexport const SET_POSTS = 'SET_POSTS';\nexport const SET_SEARCH_VALUE = 'SET_SEARCH_VALUE';\nexport const SET_HAS_ERROR = 'SET_HAS_ERROR';\n","import {\n  UserInterface,\n  Post,\n  CommentInterface,\n  PreparedPost,\n} from './types';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getPosts = (): Promise<Post[]> => {\n  return getData<Post[]>(`${API_URL}posts`);\n};\n\nexport const getUsers = (): Promise<UserInterface[]> => {\n  return getData<UserInterface[]>(`${API_URL}users`);\n};\n\nexport const getComments = (): Promise<CommentInterface[]> => {\n  return getData<CommentInterface[]>(`${API_URL}comments`);\n};\n\n\nexport const getPreparedPosts = async (): Promise<PreparedPost[]> => {\n  const users: UserInterface[] = await getUsers();\n  const posts: Post[] = await getPosts();\n  const comments: CommentInterface[] = await getComments();\n\n  const preparedPosts: PreparedPost[] = posts.map(post => (\n    {\n      ...post,\n      user: users.find(user => post.userId === user.id),\n      comments: comments.filter(comment => post.id === comment.postId),\n    }\n  ));\n\n  return preparedPosts;\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { State } from '../../redux/store';\nimport { setSearchValue } from '../../redux/actionCreators';\n\nimport './SearchPost.css';\n\ninterface Props {\n  changeSearchValue: (search: string) => void;\n  searchValue: string;\n\n}\n\nexport const SearchPostTemplate: FC<Props> = ({ searchValue, changeSearchValue }) => {\n  const filtered = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: search } = event.target;\n\n    changeSearchValue(search);\n  };\n\n  return (\n    <>\n      <label\n        htmlFor=\"search-query\"\n        className=\"label\"\n      >\n        Search Post\n      </label>\n      <input\n        type=\"text\"\n        id=\"search-query\"\n        className=\"search_input\"\n        placeholder=\"Type search word\"\n        value={searchValue}\n        onChange={filtered}\n      />\n    </>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  searchValue: state.searchValue,\n});\n\nconst mapDispatchToProps = {\n  changeSearchValue: setSearchValue,\n};\n\nexport const SearchPost = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchPostTemplate);\n","import {\n  SET_IS_LOADING,\n  SET_IS_LOADED,\n  SET_POSTS,\n  SET_SEARCH_VALUE,\n  SET_HAS_ERROR,\n} from './constants';\nimport { PreparedPost } from '../types';\n\nexport const setIsLoading = (status: boolean) => ({\n  type: SET_IS_LOADING,\n  isLoading: status,\n});\n\nexport const setHasError = (status: boolean) => ({\n  type: SET_HAS_ERROR,\n  hasError: status,\n});\n\nexport const setIsLoaded = () => ({\n  type: SET_IS_LOADED,\n  isLoaded: true,\n});\n\nexport const setPosts = (postsFromApi: PreparedPost[]) => ({\n  type: SET_POSTS,\n  posts: postsFromApi,\n});\n\nexport const setSearchValue = (search: string) => ({\n  type: SET_SEARCH_VALUE,\n  searchValue: search,\n});\n","import React, { FC } from 'react';\nimport { UserInterface } from '../../types';\n\nimport './User.css';\n\ninterface Props {\n  user: UserInterface;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  const { name, email, address } = user;\n  const { city } = address;\n\n  return (\n    <div className=\"user_info\">\n      <span>{`${name} -`}</span>\n      <span>{`${email} -`}</span>\n      <span>{`${city} -`}</span>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { CommentInterface } from '../../types';\n\nimport './Comment.css';\n\ninterface Props {\n  comment: CommentInterface;\n}\n\nexport const Comment: FC<Props> = ({ comment }) => {\n  const { name, email, body } = comment;\n\n  return (\n    <li className=\"сomment\">\n      <span className=\"сomment__name\">{`${name} (${email})`}</span>\n      <p className=\"сomment__body\">{body}</p>\n    </li>\n  );\n};\n","import React, { FC } from 'react';\nimport { Comment } from '../Comment/Comment';\nimport { CommentInterface } from '../../types';\n\nimport './Comments.css';\n\ninterface Props {\n  comments: CommentInterface[];\n}\n\nexport const Comments: FC<Props> = ({ comments }) => (\n  <ul className=\"comments\">\n    {comments.map(comment => <Comment key={comment.id} comment={comment} />)}\n  </ul>\n);\n","import React, { FC } from 'react';\nimport { PreparedPost } from '../../types';\nimport { User } from '../User/User';\nimport { Comments } from '../Comments/Comments';\n\nimport './Post.css';\n\ninterface Props {\n  post: PreparedPost;\n}\n\nexport const Post: FC<Props> = ({ post }) => {\n  const {\n    title,\n    body,\n    user,\n    comments,\n  } = post;\n\n  return (\n    <li className=\"post\">\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__body\">{body}</p>\n      {user && <User user={user} />}\n      {comments && <Comments comments={comments} />}\n    </li>\n  );\n};\n","import React, { FC, useMemo } from 'react';\nimport { connect } from 'react-redux';\nimport { State } from '../../redux/store';\nimport { PreparedPost } from '../../types';\nimport {\n  setIsLoading,\n  setIsLoaded,\n  setPosts,\n  setHasError,\n} from '../../redux/actionCreators';\nimport { getPreparedPosts } from '../../api_helpers';\nimport { SearchPost } from '../SearchPost/SearchPost';\nimport { Post } from '../Post/Post';\nimport '../../App.css';\nimport './PostsList.css';\n\ninterface StateProps {\n  isLoading: boolean;\n  isLoaded: boolean;\n  hasError: boolean;\n  posts: PreparedPost[] | [];\n  searchValue: string;\n}\n\ninterface Methods {\n  changeIsLoading: (status: boolean) => void;\n  changeIsLoaded: () => void;\n  changeHasError: (status: boolean) => void;\n  changeposts: (postsFromApi: PreparedPost[]) => void;\n}\n\ntype Props = StateProps & Methods;\n\nexport const PostListTemplate: FC<Props> = ({\n  isLoading,\n  isLoaded,\n  hasError,\n  posts,\n  searchValue,\n  changeIsLoading,\n  changeIsLoaded,\n  changeHasError,\n  changeposts,\n\n}) => {\n  const showedAllPosts = async () => {\n    changeIsLoading(true);\n    changeHasError(false);\n\n    try {\n      const postsFromApi = await getPreparedPosts();\n\n      changeposts(postsFromApi);\n    } catch (error) {\n      changeHasError(true);\n    }\n\n    changeIsLoading(false);\n    changeIsLoaded();\n  };\n\n\n  const searchedPost = useMemo(() => posts.filter(\n    post => post.title.toLowerCase().includes(searchValue)\n    || post.body.toLowerCase().includes(searchValue),\n  ), [posts, searchValue]);\n\n  if (isLoading) {\n    return (\n      <p className=\"loading\">\n     Loading...\n      </p>\n    );\n  }\n\n  if (hasError) {\n    return (\n      <>\n        <p className=\"loading\">\n        An error has occurred. Please try again later\n        </p>\n        <button\n          type=\"button\"\n          className=\"loading_button\"\n          onClick={showedAllPosts}\n        >\n          Try again\n        </button>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Dynamic list of posts</h1>\n      {(\n        !isLoaded\n          ? (\n            <>\n              <p className=\"initual_loading\">\n                Load posts\n              </p>\n              <button\n                type=\"button\"\n                className=\"loading_button\"\n                onClick={showedAllPosts}\n              >\n                Load\n              </button>\n            </>\n          )\n          : (\n            <>\n              <SearchPost />\n              <ul className=\"posts_wrapper\">\n                {searchedPost.map(post => <Post key={post.id} post={post} />)}\n              </ul>\n            </>\n          )\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: State) => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  hasError: state.hasError,\n  posts: state.posts,\n  searchValue: state.searchValue,\n});\n\nconst mapDispatchToProps = {\n  changeIsLoading: setIsLoading,\n  changeIsLoaded: setIsLoaded,\n  changeHasError: setHasError,\n  changeposts: setPosts,\n};\n\nexport const PostList = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(PostListTemplate);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport { PostList } from './components/PostsList/PostsList';\nimport './App.css';\n\nexport const App = () => (\n  <Provider store={store}>\n    <PostList />\n  </Provider>\n\n);\n"],"sourceRoot":""}